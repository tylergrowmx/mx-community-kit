/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

/**
 * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
 */
/**
 * Lower case as a function.
 */
function lowerCase(str) {
    return str.toLowerCase();
}

// Support camel case ("camelCase" -> "camel Case" and "CAMELCase" -> "CAMEL Case").
var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
// Remove all non-word characters.
var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
/**
 * Normalize the string into something other libraries can manipulate easier.
 */
function noCase(input, options) {
    if (options === void 0) { options = {}; }
    var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? " " : _d;
    var result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
    var start = 0;
    var end = result.length;
    // Trim the delimiter from around the output string.
    while (result.charAt(start) === "\0")
        start++;
    while (result.charAt(end - 1) === "\0")
        end--;
    // Transform each token independently.
    return result.slice(start, end).split("\0").map(transform).join(delimiter);
}
/**
 * Replace `re` in the input string with the replacement value.
 */
function replace(input, re, value) {
    if (re instanceof RegExp)
        return input.replace(re, value);
    return re.reduce(function (input, re) { return input.replace(re, value); }, input);
}

function dotCase(input, options) {
    if (options === void 0) { options = {}; }
    return noCase(input, __assign({ delimiter: "." }, options));
}

function snakeCase(input, options) {
    if (options === void 0) { options = {}; }
    return dotCase(input, __assign({ delimiter: "_" }, options));
}

var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function getMergeFunction(key, options) {
	if (!options.customMerge) {
		return deepmerge
	}
	var customMerge = options.customMerge(key);
	return typeof customMerge === 'function' ? customMerge : deepmerge
}

function getEnumerableOwnPropertySymbols(target) {
	return Object.getOwnPropertySymbols
		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
			return target.propertyIsEnumerable(symbol)
		})
		: []
}

function getKeys(target) {
	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
}

function propertyIsOnObject(object, property) {
	try {
		return property in object
	} catch(_) {
		return false
	}
}

// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		getKeys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	getKeys(source).forEach(function(key) {
		if (propertyIsUnsafe(target, key)) {
			return
		}

		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
		} else {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
	// implementations can use it. The caller may not replace it.
	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

var cjs = deepmerge_1;

const mxMode = getMXMode();
const isMobile = window.innerWidth <= 1024;
const isDesktop = window.innerWidth > 1024;
const isDev = mxMode === "dev";
const isTest = mxMode === "test";
const isProd = mxMode === "prod";
const kebabCase = (...args)=>snakeCase(...args).replace(/_/g, '-');
const mxConfig = {
    mxMode,
    isMobile,
    isDesktop,
    isDev,
    isTest,
    isProd,
};
let MX = null;
const defaultResourcesDropdown = {
    id: "resources",
    title: "Resources",
    order: 1,
    links: {
        top: [
            {
                title: "MX Academy",
                href: "https://academy.mx.com/hc/en-us",
            },
            {
                title: "MX Docs",
                href: "https://docs.mx.com/",
            },
            {
                title: "Developer Portal",
                href: "https://developer.mx.com/",
            },
        ],
        bottom: [
            {
                title: "Support",
                href: "https://moneydesktop.zendesk.com/hc/en-us/restricted?return_to=https%3A%2F%2Fmoneydesktop.zendesk.com%2Fhc%2Fen-us",
            },
        ],
    },
};
const mxStores = { prod: {}, dev: {}, test: {} };
mxStores.prod.createMX = () => {
    function Dropdown(
        dropdownId = "resources",
        dropdownTitle = "Resources",
        order = 1,
        quickLinks = [
            {
                title: "MX Academy",
                href: "https://academy.mx.com/hc/en-us",
                target: "_blank",
            },
            {
                title: "MX Docs",
                href: "https://docs.mx.com/",
                target: "_blank",
            },
        ],
        mainLinks = [
            {
                title: "Support",
                href: "https://moneydesktop.zendesk.com/hc/en-us/restricted?return_to=https%3A%2F%2Fmoneydesktop.zendesk.com%2Fhc%2Fen-us",
                target: "_blank",
            },
        ]
    ) {
        const navMenuEl = document.querySelector(
            'nav[role="navigation"] ul.header-navigation-items_menu'
        );
        this.dropdownId = dropdownId;
        this.dropdownTitle = dropdownTitle;
        this.order = order;
        this.expanded = false;
        const qls = quickLinks?.length > 0 ? quickLinks : null;
        const mls = mainLinks?.length > 0 ? mainLinks : null;
        let index = 0;
        let qlHtml = qls
            ? `<ul class="main-menu-list main-menu-list--quicklinks"
        id="${dropdownId}-quicklinks">
        ${qls
            .map((ql) => {
                const i = index;
                index++;
                const { title, ...attrs } = ql;
                const linkAttrs = Object.keys(attrs)
                    .map((key) => `${key}="${attrs[key]}"`)
                    .join(" ");
                return `<li class="main-menu-list__item main-menu-list__item--no-hover mx mx-quicklink" id="downshift-1-item-${i}" role="option">
                <a ${linkAttrs} class="main-menu-link link--text">
                    ${title}
                </a>
            </li>`;
            })
            .join("")}
    </ul>`
            : "";

        let mlHtml = !!mls
            ? `<ul class="main-menu-list"
            id="${dropdownId}-mainlinks">
            ${mls
                .map((l) => {
                    const i = index;
                    index++;
                    const { title, ...attrs } = l;
                    const linkAttrs = Object.keys(attrs)
                        .map((key) => `${key}="${attrs[key]}"`)
                        .join(" ");
                    return `
                <li class="main-menu-list__item main-menu-list__item--no-hover mx mx-mainlink"
                    id="downshift-1-item-${i}"
                    role="option">
    
                    <a ${linkAttrs} title="${title}"
                    class="link--text main-menu-link main-menu-link--category">
                        <span>${title}</span>
                    </a>
                </li>
                `;
                })
                .join("")}
        </ul>`
            : ``;
        this.qlHtml = qlHtml;
        this.mlHtml = mlHtml;
        const t = this;
        this.html = createHtml(t);
        function toggle(expanded = null) {
            let next;
            if (typeof expanded === "boolean") {
                next = expanded;
            } else {
                next = !t.expanded;
            }
            t.expanded = next;
            if (next) {
                handleExpand();
            } else {
                handleCollapse();
            }
        }

        const close = () => toggle(false);
        const open = () => toggle(true);
        this.toggle = toggle;
        this.close = close;
        this.open = open;

        appendDropdown(this.html);
        function appendDropdown(html) {
            const parent = navMenuEl;
            // append to parent in order (where order - 1 = index )
            const siblings = parent.children;
            const index = t.order - 1;
            const tempEl = document.createElement("div");
            tempEl.innerHTML = html;
            const el = tempEl.children[0];
            if (siblings && siblings.length === 0) {
                parent.appendChild(el);
            } else if (siblings.length < index) {
                parent.appendChild(el);
            } else {
                parent.insertBefore(el, siblings[index + 1]);
            }

            listen();
        }
        function getEls() {
            const el = document.getElementById(`${dropdownId}-dropdown`);

            const parent = navMenuEl;

            const container = el.querySelector(".dropdown-container");

            const btn = el.querySelector(`#${dropdownId}-dropdown-btn`);

            const ul = el.querySelector(`ul[role="${dropdownId}-categories"]`);
            const mainLinksUl = document.getElementById(
                `${dropdownId}-mainlinks`
            );
            const quickLinksUl = document.getElementById(
                `${dropdownId}-quicklinks`
            );
            // remove is-hidden class from ul
            const quickLinks = el.querySelectorAll(`li.mx.mx-quicklink`);
            const mainLinks = el.querySelectorAll(`li.mx.mx-mainlink`);
            return {
                el,
                parent,
                container,
                btn,
                ul,
                mainLinksUl,
                quickLinksUl,
                links: [...quickLinks, ...mainLinks],
                get quickLinks() {
                    return quickLinks;
                },
                get mainLinks() {
                    return mainLinks;
                },
            };
        }

        function handleExpand() {
            const { ul, links, btn } = getEls();
            btn.setAttribute("aria-expanded", "true");
            removeClass(ul, "is-hidden");
            links.forEach((link) => {
                link.setAttribute("aria-hidden", "false");
            });
            links[0].focus();
        }
        function handleCollapse() {
            const { ul, links, btn } = getEls();
            links.forEach((link) => {
                link.setAttribute("aria-hidden", "true");
            });
            if (!ul.classList.contains("is-hidden")) {
                addClass(ul, "is-hidden");
            }
            btn.setAttribute("aria-expanded", "false");
            btn.focus();
        }
        function listen() {
            const { el, container, links, btn } = getEls();
            btn.addEventListener("click", (e) => {
                e.preventDefault();

                const next = !t.expanded;
                t.expanded = next;
                if (next) {
                    handleExpand();
                } else {
                    handleCollapse();
                }
            });

            btn.addEventListener("keydown", (e) => {
                e.preventDefault();

                if (e.key === "ArrowDown" || e.key === "Enter") {
                    t.open();
                    setTimeout(() => {
                        const firstLink = links[0];
                        if (firstLink) {
                            firstLink.focus();
                            firstLink.dispatchEvent(new Event("focus"));
                        }
                    }, 100);
                }
                if (e.key === "ArrowUp" || e.key === "Escape") {
                    e.preventDefault();
                    t.close();
                }
            });
            links.forEach((link) => {
                const cls = "main-menu-list__item--highlighted";
                link.addEventListener("click", (e) => {
                    t.toggle(false);
                    addClass(e.target, cls);
                });
                link.addEventListener("focus", (e) => {
                    addClass(e.target, cls);
                });
                link.addEventListener("blur", (e) => {
                    removeClass(e.target, cls);
                });
                link.addEventListener("mouseover", (e) => {
                    addClass(e.target, cls);
                });
                link.addEventListener("mouseout", (e) => {
                    removeClass(e.target, cls);
                });
                // link.addEventListener("keyup", (e) => {
                //     const item = e.target;
                //     const key = e.key;
                //     // console.log('keyup', {key, event: e})
                // });
            });
            document.body.addEventListener("click", (e) => {
                if (!el.contains(e.target)) {
                    t.toggle(false);
                }
            });
            container.addEventListener("keydown", (e) => {
                if (e.key === "Escape") {
                    t.toggle(false);
                }
            });
        }
        return this;
    }

    function createHtml(state) {
        const { dropdownId, dropdownTitle, order, expanded, qlHtml, mlHtml } =
            state;
        return `<li class="header-navigation_list-item main-menu"
        id="${dropdownId}-dropdown">
        <div class="dropdown-container"><button aria-haspopup="${dropdownId}-categories"
                    type="button"
                    id='${dropdownId}-dropdown-btn'
                    style="background: none; border: none; font-weight: inherit; display: inline-block; padding: 0px; margin: 0px; cursor: pointer;">
                <span style="display: flex; align-items: center;"
                      class="main-menu-trigger"
                      role="combobox"
                      aria-haspopup="listbox"
                      aria-labelledby="downshift-1-label"
                      aria-autocomplete="list"
                      value=""
                      id="downshift-1-input"
                      autocomplete="off">
                    <span>${dropdownTitle}</span>
                    <svg aria-hidden="true"
                         width="16"
                         height="16"
                         class=""
                         viewBox="0 0 24 24"
                         xmlns="http://www.w3.org/2000/svg">
                        <path d="M7.41 8.58997L12 13.17L16.59 8.58997L18 9.99997L12 16L6 9.99997L7.41 8.58997Z"
                              fill="currentColor"></path>
    
                    </svg></span></button>
            <ul role="${dropdownId}-categories"
                class="dropdown dropdown--forums-overview is-hidden"
                component="ul"
                tabindex="-1">
                <li aria-hidden="true"
                    class="arrow is-hidden-S"></li>
                <li class="main-menu-list--overflow-scroll">
                    ${qlHtml}
                    ${mlHtml}
                </li>
            </ul>
        </div>
    </li>`;
    }

    function removeClass($el, $cls) {
        try {
            $el.classList.remove($cls);
        } catch {
            // do nothing
        }
    }
    function addClass($el, $cls) {
        try {
            if (!$el.classList.contains($cls)) {
                $el.classList.add($cls);
            }
        } catch {
            // do nothing
        }
    }
    function toggleClass($el, $cls) {
        try {
            if ($el.classList.contains($cls)) {
                $el.classList.remove($cls);
            } else {
                $el.classList.add($cls);
            }
        } catch {
            // do nothing
        }
    }
    return {
        Dropdown,
        removeClass,
        addClass,
        toggleClass,
    };
};
mxStores.prod.runMX = () => {

    try {
        if (window.innerWidth <= 1024) {
            return;
        }
        const mx = MX || mxStores.prod.createMX();
        MX = mx;
        const { Dropdown } = mx;
        const customResources =  typeof resourcesDropdown !== "undefined"
        ? resourcesDropdown
        : defaultResourcesDropdown;
        const rs = cjs.all([{id:'resources'},defaultResourcesDropdown, customResources]);
        const hideLink = (link) => {
            var { title } = link;
            var suffix,
                sel,
                parent,
                ele = null;

            suffix = kebabCase(`${title}`);
            sel = `a.header-navigation_link.title-${suffix}`;
            parent.classList.add("nav-item-hidden");
            parent.style.display = "none";
            try {
                ele = document.querySelector(sel);
                if (typeof ele === "undefined" || !ele) return null;
                parent = ele.parentElement;
                if (!!parent) {
                    try {
                        parent.classList.add("nav-item-hidden");
                        parent.style.display = "none";
                    } catch {
                        return null;
                    }
                }
            } catch (e) {
                return null;
            }
        };
        const onLinks = (links) =>
            links.map((l) => ({ ...l, target: "_blank" }));
        const topLinks = onLinks(rs.links.top);
        const bottomLinks = onLinks(rs.links.bottom);
        try {
            [...topLinks, ...bottomLinks].forEach((l) => {
                try {
                    hideLink(l);
                } catch {
                    // do nothing
                }
            });
        } catch {
            // do nothing
        }
        new Dropdown(rs.id, rs.title, rs.order, topLinks, bottomLinks);
        const hideReplaced = () =>
            [
                "a.header-navigation_link.title-mx-docs",
                "a.header-navigation_link.title-support",
                "a.header-navigation_link.title-mx-academy",
                "a.header-navigation_link.title-developer-portal",
            ].forEach((sel) => {
                const ele = document.querySelector(sel);
                const parent = ele.parentElement;
                parent.classList.add("nav-item-hidden");
                parent.style.display = "none";
            });
        try {
            hideReplaced();
        } catch {
            // do nothing
        }
    } catch (mxCommunityCustomDropdownError) {
        console.warn(
            "Error @ mxCommunityCustomDropdownError \nPlease inform Tyler Grow of the error. More details below...\n"
        );
        console.warn(mxCommunityCustomDropdownError);
    }
};
let mxStore = mxStores[mxMode] || null;
const { createMX, runMX } = mxStore ? mxStore : mxStores.prod;
MX = createMX();
if (!isProd) {
    console.log("mxConfig", mxConfig);
    console.log("mxMode", mxMode);
    console.log(
        `This mode doesn't have an mxStore or methods.\nYou can run the production store by running "runMX()", or mxStores.prod.runMX()`
    );
} else {
    (() => runMX())();
}

function getMXMode() {
    const loc = window.location.href;
    if (loc.indexOf("mxmode=dev") > -1) {
        return "dev";
    } else if (loc.indexOf("mxmode=test") > -1) {
        return "test";
    } else {
        return "prod";
    }
}

export { MX, createMX, getMXMode, mxConfig, mxMode, mxStore, mxStores, runMX };
